---
title: "A Minimal #TidyTuesday Flipbook"
author: "Gina Reynolds, May 2019"
output:
  xaringan::moon_reader:
    lib_dir: libs
    css: ["kunoichi", "ninjutsu"]
    nature:
      ratio: 16:10
      highlightStyle: github
      highlightLines: true
      countIncrementalSlides: false
---


```{r setup, include=F}
knitr::opts_chunk$set(fig.width = 6, message = F, warning = F, 
                      comment = "", cache = F)
```




---

# Introduction

This is a minimal example to demonstrate how to create a flipbook with data from #TidyTuesday.  It walks through data wrangling and plots pipelines made with the Tidyverse.  The functions that make this possible are the work of Emi Tanaka, Garrick Aden-Buie and myself, and are built for Xaringan, an Rmarkdown file type for creating presentation slides; the functions make use of the function `knitr:::knit_code$get()`.

The code to create the flipbook is an .Rmd that you can download [**here**](https://raw.githubusercontent.com/EvaMaeRey/little_flipbooks_library/master/tidytuesday_minimal_example/tidytuesday_minimal_example.Rmd).

---

Interested in more flipbooks? Check out 

- [the ggplot flipbook](https://evamaerey.github.io/ggplot_flipbook/ggplot_flipbook_xaringan.html)
- [The Tidyverse in Action](https://evamaerey.github.io/tidyverse_in_action/tidyverse_in_action.html)
- [the ggplot2 grammar guide](https://evamaerey.github.io/ggplot2_grammar_guide/ggplot2_grammar_guide)

and 

- [the little flipbooks libraray](https://raw.githubusercontent.com/EvaMaeRey/little_flipbooks_library)


For more about Xaringan:

- [Xaringan presentation slides](https://slides.yihui.name/xaringan/)

The sequential workflow of the Tidyverse makes incremental display of pipelines and ggplot statements ideal:  

- [www.tidyverse.org](https://www.tidyverse.org/)


---


# What's the slow ggplot style?

"Slow ggplot" just means working more incrementally than is typical. Elements of the approach are as follows:

- pulling out aes() from the ggplot() function:  
- using fewer functions; example - using labs() to add a title instead of ggtitle()
- using functions multiple times; example aes(x = var1) + aes(y = var2) rather than aes(x = var1, y = var2)
- using base R functions and tidyverse functions.  For other packages, the :: style to call them
- write out arguments (no shortcuts)  aes(x = gdppercap) not aes(gdppercap)
- order ggplot commands so that reactivity is obvious; scale adjustments to aesthetics might also be near the aesthetic declaration. 


---

Here, I contrast the usual plotting method to slow ggplotting:

Usual approach:

```{r, eval = F}
ggplot(my_data, aes(var1, y = var2, col = var3)) +
  geom_point() +
  ggtitle("My Title") +
  labs(x = "the x label", y = "the y label", col = "legend title")
```

Using slow ggplotting: 

```{r, eval = F}
ggplot(data = my_data) +
  aes(x = var1) +
  labs(x = "the x label") +
  aes(y = var2) +
  labs(y = "the y label") +
  geom_point() +
  aes(col = var3) +
  labs(col = "legend title") +
  labs(title = "My title")
```




---

# Set up

Okay. Let's load the the `reveal for xaringan` functions for "flipbooking" and the `tidyverse`.

```{r}
source(file = "https://raw.githubusercontent.com/EvaMaeRey/little_flipbooks_library/master/xaringan_reveal_parentheses_balanced.R")
```

And load the tidyverse.

```{r}
library(tidyverse)
```

And load the data from the tidytuesday github page. 

```{r}
nobel_winners <- readr::read_csv("https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-05-14/nobel_winners.csv")

```

---

# Where we are going: 

We'll create this plot.  I have **echo** set to FALSE in the code chunk options here so that you don't see the code, and **eval** to TRUE so that the plot output is produced.  The code chunk is given the name "nobel", and this is used in the in apply_reveal function, which breaks down code by wrangling and plot statements. 

```{r nobel, echo = F, eval = T, fig.height=5}
nobel_winners %>% 
  mutate(age_at_win = prize_year -
           lubridate::year(birth_date)) %>% 
ggplot() + 
  aes(x = prize_year) +  # x axis 
  aes(y = age_at_win) +  # y axis
  geom_point() +
  geom_smooth() +  # loess smoothing
  theme_minimal() +
  labs(x = "Year of prize") +
  labs(y = "Age at Win") +
  labs(caption = "Vis: Gina Reynolds for TidyTuesday") +
  labs(title = "Nobel Prize award year vs. age of winner") +
  labs(subtitle = "Data: \"A dataset of publication records for Nobel laureates\" \nLi, Jichao; Yin, Yian; Fortunato, Santo; Wang Dashun, 2018 ")
```
 

 
---

# How do we get there?

In the next slide, we'll walk through the code that produces this plot, and the output along the way. We use the code `apply_reveal("nobel")` in-line to access the code from the code chunk called *nobel*.
 
---

`r apply_reveal("nobel")`


---

# A second approach: Separate the data manipulation from the plotting.

If you'd like, you can also save your manipulated data and then plot, using the `%>%` to create your pipe line, and then reverse assignment operator `->`.  An example follows. 

---

```{r nobeltransform, echo = F, eval = T, fig.height=5}
nobel_winners %>% 
  mutate(age_at_win = prize_year -
           lubridate::year(birth_date)) -> 
  nobel_winners_w_age
```


---

`r apply_reveal("nobeltransform")`

---

# Plotting the transformed data (and *not* revealing your plot in advance -- *just* showing the build).

Now you can use the transformed data to start the plot.  

Note that you also might prefer a behavior where you don't show a preview of the finished plot in advance.  I show an example of this below. I don't evaluate the code chunk (i.e. I've set eval to FALSE) and I don't echo it (i.e. echo is set to false). This means that the code chunk itself won't yeild any output (code or plot) to be put on a slide.  This means that I don't need to use the dashes, \-\-\- to separate the code chunk from the `apply_reveal()` statement, which differs from previous set-ups where a slide separator directly preceded the `apply_reveal()` call. 

---

```{r plot_nobel_again, echo = F, eval = FALSE, fig.height=5}
ggplot(data = nobel_winners_w_age) + 
  aes(x = prize_year) +  # x axis 
  aes(y = age_at_win) +  # y axis
  geom_point() +
  geom_smooth() +  # loess smoothing
  theme_minimal() +
  labs(x = "Year of prize") +
  labs(y = "Age at Win") +
  labs(x = "Year of prize") +
  labs(y = "Age at Win") +
  labs(caption = "Vis: Gina Reynolds for TidyTuesday") +
  labs(title = "Nobel Prize award year vs. age of winner") +
  labs(subtitle = "Data: \"A dataset of publication records for Nobel laureates\" \nLi, Jichao; Yin, Yian; Fortunato, Santo; Wang Dashun, 2018 ")
```


`r apply_reveal("plot_nobel_again")`



```{css, eval = TRUE, echo = F}
.remark-code{line-height: 1.5; font-size: 80%}
```


